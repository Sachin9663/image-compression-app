{"version":3,"sources":["static/images/upload-bg.jpg","components/ProgressBar/index.js","components/LandingPage/index.js","static/images/Hidden-pana.svg","App.js","reportWebVitals.js","index.js"],"names":["ProgressBar","percentage","console","log","completed","LandingPage","props","useState","originalImage","setOriginalImage","originalImageFile","setOriginalImageFile","fileName","setfileName","compressedImage","setCompresssedImage","setPercentage","className","style","backgroundImage","UploadBg","src","alt","type","name","id","onChange","e","imageFile","target","files","match","alert","window","location","reload","URL","createObjectURL","handleChange","onClick","preventDefault","output","option","maxSizeMB","mazWidthorHeight","useWebWorked","onProgress","progress","handleProgress","imageCompression","then","x","downloadLink","href","download","App","Hiddenpana","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAAe,MAA0B,sC,iBCW1BA,EATK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAElB,OADAC,QAAQC,IAAI,aAAcF,GAEtB,8BACI,cAAC,IAAD,CAAUG,UAAWH,O,MCqElBI,MAnEf,SAAqBC,GAAQ,IAAD,EACkBC,mBAAS,IAD3B,mBACjBC,EADiB,KACFC,EADE,OAE0BF,mBAAS,IAFnC,mBAEjBG,EAFiB,KAEEC,EAFF,OAGQJ,mBAAS,IAHjB,mBAGjBK,EAHiB,KAGPC,EAHO,OAIuBN,mBAAS,IAJhC,mBAIjBO,EAJiB,KAIAC,EAJA,OAKWR,mBAAS,GALpB,mBAKjBN,EALiB,KAKLe,EALK,KAuCxB,OACI,sBAAKC,UAAU,kBAAf,UACI,sBAAKA,UAAU,SAAf,UACI,oBAAIA,UAAU,eAAd,2BACA,qBAAKA,UAAU,eAAeC,MAAO,CAACC,gBAAgB,OAAD,OAASC,EAAT,MAArD,SACKV,EAAoB,qBAAKW,IAAKX,EAAmBY,IAAI,WAAWL,UAAU,UAC3E,uBAAOM,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOR,UAAU,YAAYS,SAAU,SAAAC,GAAC,OAvCrE,SAACA,GAClB,IAAMC,EAAYD,EAAEE,OAAOC,MAAM,GACjC,IAAKF,EAAUJ,KAAKO,MAAM,yBAGtB,OAFAC,MAAM,gBACNC,OAAOC,SAASC,UACT,EAGP1B,EAAiBmB,GACjBjB,EAAqByB,IAAIC,gBAAgBT,IACzCf,EAAYe,EAAUJ,MA6BgEc,CAAaX,WAGnG,sBAAKV,UAAU,WAAf,UACI,qBAAKA,UAAU,iBAAf,SACKP,EAAoB,wBAAQ6B,QA1BtB,SAACZ,GACpBA,EAAEa,iBACF,IAKIC,EALEC,EAAS,CAAEC,UAAW,EAAGC,iBAAkB,IAAKC,cAAc,EAAMC,WAAY,SAACC,IANpE,SAACA,GACpB/B,EAAc+B,GAKuFC,CAAeD,KACpH,GAAGL,EAAOC,WAAanC,EAAgB,KAEnC,OADAwB,MAAM,aACC,EAGXiB,YAAiBzC,EAAekC,GAAQQ,MAAK,SAACC,GAC1CV,EAASU,EACT,IAAMC,EAAehB,IAAIC,gBAAgBI,GACzC1B,EAAoBqC,OAe0CnC,UAAU,kBAA3C,4BAAuF,OAEhH,cAAC,EAAD,CAAahB,WAAYA,OAE7B,sBAAKgB,UAAU,WAAf,UACI,oBAAIA,UAAU,eAAd,2CACCH,EAAkB,qBAAKO,IAAKP,EAAiBQ,IAAI,aAAaL,UAAU,UAAa,KACtF,qBAAKA,UAAU,iBAAf,SACKH,EAAkB,wBAAQG,UAAU,kBAAlB,SACnB,mBAAGoC,KAAMvC,EAAiBwC,SAAU1C,EAAUK,UAAU,kBAAxD,8BAC8B,cCpEnC,MAA0B,wCCe1BsC,MAVf,WACE,OACE,sBAAKtC,UAAU,MAAMC,MAAO,CAACC,gBAAgB,iEAAD,OAAmEqC,EAAnE,MAA5C,UACE,oBAAIvC,UAAU,eAAd,4CACA,qBAAIA,UAAU,kBAAd,uBAA0C,kCAA1C,mDACA,cAAC,EAAD,QCESwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.792973f8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/upload-bg.0521c046.jpg\";","import Progress from 'react-progressbar'\n\nconst ProgressBar = ({percentage}) => {\n    console.log('percentage', percentage)\n    return (\n        <div>\n            <Progress completed={percentage} />\n         </div>\n    )\n}\n\nexport default ProgressBar;","import React, { useState } from 'react';\nimport imageCompression from 'browser-image-compression';\n\nimport UploadBg from '../../static/images/upload-bg.jpg'\n\nimport ProgressBar from '../ProgressBar';\nimport './styles.css'\n\nfunction LandingPage(props) {\n    const [originalImage, setOriginalImage] = useState('')\n    const [originalImageFile, setOriginalImageFile] = useState('')\n    const [fileName, setfileName] = useState('')\n    const [compressedImage, setCompresssedImage] = useState('')\n    const [percentage, setPercentage]= useState(0) \n    const handleChange = (e) => {\n        const imageFile = e.target.files[0]\n        if (!imageFile.name.match(/.(jpg|jpeg|png|gif)$/i)){\n            alert('not an image');\n            window.location.reload();\n            return false\n        }\n        else {\n            setOriginalImage(imageFile)\n            setOriginalImageFile(URL.createObjectURL(imageFile))\n            setfileName(imageFile.name)\n        }\n    }\n\n    const handleProgress = (progress) => {\n        setPercentage(progress)\n    }\n\n    const handleCompress = (e) => {\n        e.preventDefault();\n        const option = { maxSizeMB: 1, mazWidthorHeight: 500, useWebWorked: true, onProgress: (progress) => {handleProgress(progress)} };\n        if(option.maxSizeMB >= originalImage / 1024) {\n            alert(\"Not valid\")\n            return 0;\n        }\n        let output;\n        imageCompression(originalImage, option).then((x)=> {\n            output = x;\n            const downloadLink = URL.createObjectURL(output)\n            setCompresssedImage(downloadLink)\n        });\n    }\n\n    return (\n        <div className=\"ori-img-wrapper\">\n            <div className=\"upload\">\n                <h1 className=\"upload-title\">Upload image </h1>\n                <div className=\"imageWrapper\" style={{backgroundImage: `url(${UploadBg})`}}>\n                    {originalImageFile ? <img src={originalImageFile} alt='original' className=\"image\" /> : \n                    <input type=\"file\" name=\"file\" id=\"file\" className=\"inputfile\" onChange={e => handleChange(e)} />}\n                </div>\n            </div>\n            <div className=\"compress\">\n                <div className=\"button-wrapper\">\n                    {originalImageFile ? <button onClick={handleCompress} className=\"compress-button\">compress image</button> : null }\n                </div>\n                <ProgressBar percentage={percentage} />\n            </div>\n            <div className=\"download\">\n                <h1 className=\"upload-title\">Your compressed image is here</h1>\n                {compressedImage ? <img src={compressedImage} alt=\"compressed\" className=\"image\" /> : null}\n                <div className=\"button-wrapper\">\n                    {compressedImage ? <button className=\"compress-button\">\n                    <a href={compressedImage} download={fileName} className=\"download-button\">\n                    Download Image</a></button> : null}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LandingPage;","export default __webpack_public_path__ + \"static/media/Hidden-pana.83543059.svg\";","import './App.css';\nimport LandingPage from './components/LandingPage';\nimport Hiddenpana from './static/images/Hidden-pana.svg'\n\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{backgroundImage: `linear-gradient(rgb(255,255,255), rgba(255,255,255,.68)), url(${Hiddenpana})`}}>\n      <h1 className=\"page-heading\">Smart JPEG and PNG compression</h1>\n      <h3 className=\"page-subheading\">More than <b>1</b> million images optimized and still counting!</h3>\n      <LandingPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}